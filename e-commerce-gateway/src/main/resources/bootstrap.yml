server:
  port: 9001
  servlet:
    context-path: /e-commerce-gateway

spring:
  profiles:
    include:
      security
  application:
    name: e-commerce-gateway
  cloud:
    nacos:
      discovery:
        enabled: true # 如果不想使用 Nacos 进行服务注册和发现, 设置为 false 即可
        # server-addr: xxxxxx
        server-addr: ${security.spring.cloud.nacos.discovery.server-addr} # Nacos 服务器地址
        namespace: ${security.spring.cloud.nacos.discovery.namespace}
        metadata:
          management:
            context-path: ${server.servlet.context-path}/actuator
    # 静态路由(在配置文件中配置)
  #    gateway:
  #      routes:
  #        - id: path_route # 路由的ID
  #          uri: 127.0.0.1:8080/user/{id} # 匹配后路由地址
  #          predicates: # 断言, 路径相匹配的进行路由
  #            - Path=/user/{id}
  kafka:
    bootstrap-servers: ${security.spring.kafka.bootstrap-servers}
    producer:
      retries: 3
    consumer:
      auto-offset-reset: latest
  zipkin:
    sender:
      type: kafka # 默认是 web
    base-url: ${security.spring.zipkin.base-url}
  main:
    allow-bean-definition-overriding: true  # 因为将来会引入很多依赖, 难免有重名的 bean

# 这个地方独立配置, 是网关的数据, 代码 GatewayConfig.java 中读取被监听
nacos:
  gateway:
    route:
      config:
        data-id: e-commerce-gateway-router
        group: e-commerce

# 暴露端点
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
